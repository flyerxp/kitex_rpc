path: conf/kitex.go
update_behavior:
  type: skip
body: |-
  package conf
  import (
    "fmt"
    "github.com/flyerxp/globalStruct/config"
    "github.com/flyerxp/lib/v2/utils/env"
  )
  func GetConfYaml() string {
  //这里需要换成自己的获取配置
  nacosConf := config.GetRpcNacosConf(env.GetEnv())
  address := ":2082"
  yaml := `kitex:
    server:
      service_name: "{{ .ServiceName }}"
      address: "%s"
      log_level: debug
      service_find: #服务发现配置
        type: nacos
    client:
      rpc_timeout: 1s #超时设置
      conn_timeout: 1s #连接超时
      max_retry_times: 1 #最大重试次数
      eer_threshold: 10  #重试熔断错误率阈值, 方法级别请求错误率超过阈值则停止重试 10 是指百分之10
      conn_type: long #使用长连接还是短连接
      warmup: true  #是否预热
      warmup_conn_nums: 2 #预热连接数
      pool:
        max_idle_per_address: 10 #表示每个后端实例可允许的最大闲置连接数
        max_idle_global: 1000 #表示全局最大闲置连接数
        max_idle_timeout: 30s #表示连接的闲置时长，超过这个时长的连接会被关闭（最小值 3s，默认值 30s ）
        #min_idle_per_address: 2 #对每个后端实例维护的最小空闲连接数，这部分连接即使空闲时间超过 MaxIdleTimeout 也不会被清理。
      service_find:
        type: nacos
    nacos:
      name: %s
      url: %s
      ns: %s
      user: %s
      pwd: %s
    `
    y := fmt.Sprintf(yaml, address, nacosConf.Name, nacosConf.Url, nacosConf.Ns, nacosConf.User, nacosConf.Pwd)
    return y
  }
