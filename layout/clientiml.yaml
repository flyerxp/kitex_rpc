path: client/client_impl.go
update_behavior:
  type: cover
body: |-
  package client
  import (
      {{- range $path, $aliases := .Imports}}
      	{{- if not $aliases }}
      		"{{$path}}"
           {{- else if or (eq $path "github.com/cloudwego/kitex/client") (eq $path "github.com/cloudwego/kitex/pkg/serviceinfo")}}
      	{{- else}}
      		{{- range $alias, $is := $aliases}}
      			{{$alias}} "{{$path}}"
      		{{- end}}
      	{{- end}}
      {{- end}}
      "github.com/cloudwego/kitex/client/callopt"
      "github.com/flyerxp/webrpclib/v2/rpc"
      "time"
      "github.com/flyerxp/lib/v2/logger"
      "github.com/cloudwego/kitex/pkg/kerrors"
      "github.com/flyerxp/lib/v2/config"
      "go.uber.org/zap"
  )
  func recordError(ctx context.Context, err error,field ...zap.Field) {
     rpc.RecordError(ctx, err,field...)
  }  
  {{range .AllMethods}}
      {{- if or .ClientStreaming .ServerStreaming}}
          func {{.Name}} ({{if not .ClientStreaming}}{{range .Args}}{{LowerFirst .Name}} {{.Type}}, {{end}}{{end}}stream {{.PkgRefName}}.{{.ServiceName}}_{{.RawName}}Server) (err error){
             t := time.Now()
            defer func() {
                i := int(time.Since(t).Microseconds())
                logger.AddRpcTime(ctx,i)
                
             }()
             err = getClient().{{.Name}}(ctx, {{- range .Args}}{{LowerFirst .Name}},{{end}} callOptions...)            
             return err
          }
      {{ else }}
      {{- if .Oneway}}
         func {{.Name}}(ctx context.Context, {{- range .Args}} {{LowerFirst .Name}} {{.Type}}, {{end}} callOptions ...callopt.Option) (err error){
             t := time.Now()
             defer func() {
                i := int(time.Since(t).Microseconds())
                logger.AddRpcTime(ctx,i)
                
             }()
             err = getClient().{{.Name}}(ctx, {{- range .Args}} {{LowerFirst .Name}}, {{end}} callOptions...)            
             return err
        }
      {{else -}}
          func {{.Name}}(ctx context.Context, {{range .Args}} {{LowerFirst .Name}} {{.Type}} ,{{end}} callOptions ...callopt.Option) (resp {{.Resp.Type}}, err error){
            t := time.Now()
            defer func() {
              i := int(time.Since(t).Microseconds())
              logger.AddRpcTime(ctx,i)
              
            }()
            resp, err = getClient().{{.Name}}(ctx, {{- range .Args}} {{LowerFirst .Name}}, {{end}} callOptions...)
            if err != nil {
               recordError(ctx, err,zap.String("rpcClientName","{{ .ServiceName }}"))              
            }
            if resp != nil && resp.Status == 203 {
               err = kerrors.NewBizStatusError(203, resp.Message)
            }
            if resp == nil {
              resp = new({{ ReplaceString .Resp.Type "*" "" -1 }})
              resp.Status = 203
              resp.Message = err.Error()
            }
            if resp.Status == 202 && err == nil {
               err = kerrors.NewBizStatusError(202, resp.Message)
            }
            if resp.Status == 204 && err == nil {
               err = kerrors.NewBizStatusError(204, resp.Message)
            }
            if resp.Status == 0 && err != nil {
              if bizE, ok := kerrors.FromBizStatusError(err); ok {
                resp.Status = bizE.BizStatusCode()
              }
            }
            return resp, err
           }
  {{end}}
  {{end}}
  {{end}}